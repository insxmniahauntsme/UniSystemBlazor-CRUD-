@page "/edit-group/{groupId:int}"

@rendermode InteractiveServer
@attribute [StreamRendering]

@inject IEditGroupUseCase EditGroupUseCase
@inject IGetGroupByIdUseCase GetGroupByIdUseCase
@inject NavigationManager Navigation
@inject NotificationService NotificationService

<link rel="stylesheet" href="css/editPage.css?v1.0" />

<div class="page-header">
    <div class="editpage-topic">Edit group</div>
</div>

<br />

<EditForm Model="group" FormName="editForm" OnValidSubmit="Save">

    <div class="form-group" style="padding-bottom: 10px">
        <label for="Name">Group name</label>
        <InputText id="Name"
                   @bind-Value='group.GroupName'
                   class="form-control">
        </InputText>
    </div>

    <div class="form-group" style="padding-bottom: 10px">
        <label for="Faculty">Faculty</label>
        <InputText id="Faculty"
                   @bind-Value='group.Faculty'
                   class="form-control">
        </InputText>
    </div>

    <br />

    <div style="align-items: center">
        <button type="submit" class="btn btn-primary">Save</button>
        <button type="button" class="btn btn-primary" @onclick='() => Navigation.NavigateTo("/groups")'>Cancel</button>
    </div>
</EditForm>

@code {
    [Parameter]
    public int GroupId { get; set; }

    private UniSystem.Core.Entities.Group group = null!;

    private async Task Save()
    {
        try
        {
            await EditGroupUseCase.ExecuteAsync(group);
            Navigation.NavigateTo("/groups");
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Success", Detail = "Group was successfully edited", Duration = 4000 });
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error", Detail = $"{ex.Message}", Duration = 4000 });
        }
    }

    protected override async Task OnInitializedAsync()
    {
        group = await GetGroupByIdUseCase.ExecuteAsync(GroupId);
    }

}
