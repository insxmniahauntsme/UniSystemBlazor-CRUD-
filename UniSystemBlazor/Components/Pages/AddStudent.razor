@page "/add-student"
@using UniSystem.UseCases.TableActionsUseCases

@rendermode InteractiveServer
@attribute [StreamRendering]

@inject IAddStudentUseCase AddStudentUseCase
@inject NavigationManager Navigation
@inject NotificationService NotificationService

<link rel="stylesheet" href="css/addPage.css?v1.0" />

<div class="page-header">
    <div class="addpage-topic">Add student</div>
</div>

<br/>

<EditForm Model="student" FormName="studentForm" OnValidSubmit="Save">

    <div class="form-group" style="padding-bottom: 10px">
        <label for="Name">Name</label>
        <InputText 
            id="Name"
            @bind-Value='student.Name'
            class="form-control">
        </InputText>
    </div>

    <div class="form-group" style="padding-bottom: 10px">
        <label for="Surname">Surname</label>
        <InputText 
            id="Surname"
            @bind-Value='student.Surname'
            class="form-control">
        </InputText>
    </div>

    <div class="form-group" style="padding-bottom: 10px">
        <label for="Group">Group</label>
        <InputText 
            id="Group"
            @bind-Value='student.GroupName'
            class="form-control">
        </InputText>
    </div>

    <div class="form-group">
        <label for="AvgScore">Average score</label>
        <InputNumber 
            id="AvgScore"
            @bind-Value='student.AverageScore'
            class="form-control">
        </InputNumber>
    </div>

    <br/>

    <div style="align-items: center">
        <button type="submit" class="btn btn-primary">Save</button>
        <button type="button" class="btn btn-primary" @onclick='() => Navigation.NavigateTo("/students")'>Cancel</button>
    </div>

</EditForm>

@code {
    [SupplyParameterFromForm]
    private Student student {get; set;} = new Student();

    private async Task Save()
    {
        try
        {
            await AddStudentUseCase.ExecuteAsync(student);
            Navigation.NavigateTo("/students");
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Success", Detail = "Student was successfully added", Duration = 4000 });
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Info, Summary = "Warning", Detail = "Group with this name doesn't exist", Duration = 4000 });
            Console.WriteLine($"Error: {ex.Message}");
        }

    }
}
