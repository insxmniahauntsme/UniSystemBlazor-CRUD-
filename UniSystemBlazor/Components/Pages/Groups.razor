@page "/groups"
@rendermode InteractiveServer

@attribute [StreamRendering]

@inject IGetGroupsUseCase GetGroupsUseCase
@inject IDeleteGroupUseCase DeleteGroupUseCase
@inject NavigationManager Navigation

<PageTitle>Groups</PageTitle>

<link rel="stylesheet" href="css/tablePage.css?v=1.0" />

<div class="page-header">
    <div class="table-topic">Groups</div>
    <button class="add-button" @onclick="AddGroup">
        +
    </button>
</div>

<br/>

@if (groups == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Faculty</th>
                <th>Amount of students</th>
                <th>Average score</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var group in groups)
            {
                <tr>
                    <td>@group.GroupId</td>
                    <td>@group.GroupName</td>
                    <td>@group.Faculty</td>
                    <td>@group.AmountOfStudents</td>
                    <td>@group.GroupAverage</td>
                    <td>
                        <button type="button"
                                class="edit-button"
                                @onclick="() => EditGroup(group.GroupId)">
                            Edit
                        </button>
                        <button type="button"
                                class="delete-button"
                                @onclick="() => DeleteGroup(group)">
                            Delete
                        </button>
                    </td>
                </tr>

            }
        </tbody>
    </table>

}


@code {
    private IEnumerable<UniSystem.Core.Entities.Group>? groups;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            groups = await GetGroupsUseCase.ExecuteAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private void AddGroup()
    {
        Navigation.NavigateTo("/add-group");
    }

    private void EditGroup(int Id)
    {
        Navigation.NavigateTo($"/edit-group/{Id}");
    }

    private async Task DeleteGroup(UniSystem.Core.Entities.Group group)
    {
        await DeleteGroupUseCase.ExecuteAsync(group);
        groups = await GetGroupsUseCase.ExecuteAsync();
    }
}

