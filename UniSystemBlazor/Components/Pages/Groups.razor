@page "/groups"
@rendermode InteractiveServer

@attribute [StreamRendering]

@inject IGetGroupsUseCase GetGroupsUseCase
@inject IDeleteGroupUseCase DeleteGroupUseCase
@inject IGetGroupAverageUseCase GetGroupAverageUseCase
@inject IUpdateGroupsTableUseCase UpdateGroupsTableUseCase
@inject IGetAmountOfStudentsUseCase GetAmountOfStudentsUseCase

@inject NavigationManager Navigation
@inject NotificationService NotificationService
@inject DialogService dialogService

<PageTitle>Groups</PageTitle>

<link rel="stylesheet" href="css/tablePage.css?v=1.0" />

<div class="page-header">
    <div class="table-topic">Groups</div>
    <button class="add-button" @onclick="AddGroup">
        +
    </button>
</div>

<br/>

@if (groups == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Faculty</th>
                <th>Amount of students</th>
                <th>Average score</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var group in groups)
            {
                <tr>
                    <td>@group.GroupId</td>
                    <td>@group.GroupName</td>
                    <td>@group.Faculty</td>
                    <td>@group.AmountOfStudents</td>
                    <td>@group.GroupAverage</td>
                    <td>
                        <button type="button"
                                class="edit-button"
                                @onclick="() => EditGroup(group.GroupId)">
                            Edit
                        </button>
                        <button type="button"
                                class="delete-button"
                                @onclick="() => ConfirmDelete(group)">
                            Delete
                        </button>
                    </td>
                </tr>

            }
        </tbody>
    </table>

}


@code {
    private IEnumerable<UniSystem.Core.Entities.Group>? groups;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            //incapsulate this in one/different class(es)
            groups = await GetGroupsUseCase.ExecuteAsync();
            var groupList = groups.ToList();

            foreach(var group in groupList)
            {
                if (group != null)
                {
                    //update amount of students
                    group.GroupAverage = await GetGroupAverageUseCase.ExecuteAsync(group.GroupName);
                    group.AmountOfStudents = await GetAmountOfStudentsUseCase.ExecuteAsync(group.GroupName);
                    await UpdateGroupsTableUseCase.ExecuteAsync(group);
                }
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }

    }

    private void AddGroup()
    {
        Navigation.NavigateTo("/add-group");
    }

    private void EditGroup(int Id)
    {
        Navigation.NavigateTo($"/edit-group/{Id}");
    }

    private async Task ConfirmDelete(UniSystem.Core.Entities.Group group)
    {
        bool? result = await dialogService.Confirm("This action will delete the group and may also delete related elements from other tables. Do you want to proceed?", "Delete group?",
            new ConfirmOptions
            {
                Style = "color: #4db9f2;",
                OkButtonText = "Yes",
                CancelButtonText = "No",

            });

        if (result == true)
        {
            await DeleteGroup(group);
        }
    }

    private async Task DeleteGroup(UniSystem.Core.Entities.Group group)
    {
        try
        {
            await DeleteGroupUseCase.ExecuteAsync(group);
            groups = await GetGroupsUseCase.ExecuteAsync();
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Success", Detail = "Group was successfully deleted", Duration = 4000 });
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error", Detail = "This group doesn't exist", Duration = 4000 });
        }
    }
}

