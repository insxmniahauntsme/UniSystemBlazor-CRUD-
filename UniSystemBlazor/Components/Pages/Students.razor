@page "/students"
@rendermode InteractiveServer

@attribute [StreamRendering]

@inject IGetStudentsUseCase GetStudentsUseCase
@inject NavigationManager Navigation
@inject IDeleteStudentUseCase DeleteStudentUseCase
@inject NotificationService NotificationService
@inject DialogService dialogService

<PageTitle>Students</PageTitle>

<link rel="stylesheet" href="css/tablePage.css?v=1.0" />

<div class="page-header">
    <div class="table-topic">Students</div>
    <button class="add-button" @onclick="AddStudent">
        +
    </button>
</div>

<br/>

@if (students == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Registration date</th>
                <th>Name</th>
                <th>Surname</th>
                <th>Group</th>
                <th>Average score</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var student in students)
            {
                <tr>
                    <td>@student.RegistrationDate</td>
                    <td>@student.Name</td>
                    <td>@student.Surname</td>
                    <td>@student.GroupName</td>
                    <td>@student.AverageScore</td>
                    <td>
                        <button 
                            type="button" 
                            class="edit-button"
                            @onclick="() => EditStudent(student.StudentId)">
                            Edit
                        </button>
                        <button
                            type="button"
                            class="delete-button"
                            @onclick="() => ConfirmDelete(student)">
                            Delete
                        </button>
                    </td>
                </tr>

            }
        </tbody>
    </table>

}

@code {
    private IEnumerable<Student>? students;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            students = await GetStudentsUseCase.ExecuteAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private void AddStudent()
    {
        Navigation.NavigateTo("/add-student");
    }

    private void EditStudent(int id)
    {
        Navigation.NavigateTo($"/edit-student/{id}");
    }

    private async Task ConfirmDelete(Student student)
    {
        bool? result = await dialogService.Confirm("This action will delete the student and may also delete related elements from other tables. Do you want to proceed?", "Delete student?", new ConfirmOptions { OkButtonText = "Yes", CancelButtonText = "No" });

        if (result == true)
        {
            await DeleteStudent(student);
        }
    }

    private async Task DeleteStudent(Student student)
    {
        try
        {
            await DeleteStudentUseCase.ExecuteAsync(student);
            students = await GetStudentsUseCase.ExecuteAsync();
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Success", Detail = "Student was successfully deleted", Duration = 4000 });
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error", Detail = "This student doesn't exist", Duration = 4000 });
        }
    }
}