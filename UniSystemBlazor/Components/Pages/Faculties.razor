@page "/"
@rendermode InteractiveServer

@inject IGetFacultiesUseCase GetFacultiesUseCase
@inject IDeleteFacultyUseCase DeleteFacultyUseCase
@inject NavigationManager Navigation

<PageTitle>Faculties</PageTitle>

<link rel="stylesheet" href="css/tablePages.css?v=1.0"/>

<div class="page-header">
    <div class="table-topic">Faculties</div>
    <button class="add-button" @onclick="AddFaculty">
        +
    </button>
</div>

<br/>

@if (faculties == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Department</th>
                <th>Note</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var faculty in faculties)
            {
                <tr>
                    <td>@faculty.FacultyId</td>
                    <td>@faculty.FacultyName</td>
                    <td>@faculty.Department</td>
                    <td>@faculty.Note</td>
                    <td>
                        <button type="button"
                                class="edit-button">
                            Edit
                        </button>
                        <button type="button"
                                class="delete-button"
                                @onclick="() => DeleteFaculty(faculty)">
                            Delete
                        </button>
                    </td>
                </tr>
                
            }
        </tbody>
    </table>

}

@code {
    private IEnumerable<Faculty>? faculties;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            faculties = await GetFacultiesUseCase.ExecuteAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private void AddFaculty()
    {
        Navigation.NavigateTo("/add-faculty");
    }

    private async Task DeleteFaculty(Faculty faculty)
    {
        await DeleteFacultyUseCase.ExecuteAsync(faculty);
        faculties = await GetFacultiesUseCase.ExecuteAsync();
    }
}
