@page "/"
@rendermode InteractiveServer
@using Radzen.Blazor
@using Radzen
@using UniSystemBlazor.Components.Controls

@inject IGetFacultiesUseCase GetFacultiesUseCase
@inject IDeleteFacultyUseCase DeleteFacultyUseCase
@inject IGetFacultiesByPropertyUseCase GetFacultiesByNameUseCase

@inject DialogService dialogService
@inject NavigationManager Navigation
@inject NotificationService NotificationService

<PageTitle>Faculties</PageTitle>

<link rel="stylesheet" href="css/tablePage.css?v=1.0"/>

<div class="page-header">
    <div class="table-topic">Faculties</div>
    <Searchbar TEntity="Faculty" SearchFunction="GetFacultiesByNameAsync" OnSearchResults="OnSearchResults"></Searchbar>
    <button class="add-button" @onclick="AddFaculty">
        +
    </button>
</div>

<br/>

@if (faculties == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Department</th>
                <th>Note</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var faculty in faculties)
            {
                <tr>
                    <td>@faculty.FacultyId</td>
                    <td>@faculty.FacultyName</td>
                    <td>@faculty.Department</td>
                    <td>@faculty.Note</td>
                    <td>
                        <button type="button"
                                class="edit-button"
                                @onclick="() => EditFaculty(faculty.FacultyId)">
                            Edit
                        </button>
                        <button type="button"
                                class="delete-button"
                                @onclick="() => ConfirmDelete(faculty)">
                            Delete
                        </button>
                        <button type="Show chart"
                                class="chart-button"
                                @onclick="ShowChart">
                            Chart       
                        </button>
                    </td>
                </tr>
                
            }
        </tbody>
    </table>

}

@code {
    private IEnumerable<Faculty>? faculties;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            faculties = await GetFacultiesUseCase.ExecuteAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private void AddFaculty()
    {
        Navigation.NavigateTo("/add-faculty");
    }

    private void EditFaculty(int Id)
    {
        Navigation.NavigateTo($"/edit-faculty/{Id}");
    }

    private async Task ShowChart()
    {
        await dialogService.OpenAsync<GroupsChart>("Groups chart", new Dictionary<string, object>(), new DialogOptions()
        {
            Height = "600px",
            Width = "1100px"
        });

    }

    private async Task ConfirmDelete(Faculty faculty)
    {
        bool? result = await dialogService.Confirm("This action will delete the faculty and may also delete related elements from other tables. Do you want to proceed?", "Delete faculty?",
            new ConfirmOptions 
            { 
                OkButtonText = "Yes", 
                CancelButtonText = "No" 
            });

        if (result == true)
        {
            await DeleteFaculty(faculty);
        }
    }

    private async Task DeleteFaculty(Faculty faculty)
    {
        try
        {
            await DeleteFacultyUseCase.ExecuteAsync(faculty);
            faculties = await GetFacultiesUseCase.ExecuteAsync();
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Success", Detail = "Faculty was successfully deleted", Duration = 4000 });
        }   
        catch (Exception)
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error", Detail = "This faculty doesn't exist", Duration = 4000 });
        }
    }

    private async Task<IEnumerable<Faculty>> GetFacultiesByNameAsync(string name)
    {
        return await GetFacultiesByNameUseCase.ExecuteAsync(name);
    }

    private void OnSearchResults(IEnumerable<Faculty> searchResults)
    {
        faculties = searchResults;
    }
}
