@page "/edit-student/{studentName:alpha}"

@rendermode InteractiveServer
@attribute [StreamRendering]

@inject IEditStudentUseCase EditStudentUseCase
@inject IGetStudentByNameUseCase GetStudentByNameUseCase
@inject NavigationManager Navigation

<link rel="stylesheet" href="css/editPage.css?v1.0" />

<div class="page-header">
    <div class="editpage-topic">Edit student</div>
</div>

<br />

<EditForm Model="student" FormName="editForm" OnValidSubmit="Save">

    <div class="form-group" style="padding-bottom: 10px">
        <label for="Name">Student name</label>
        <InputText id="Name"
                   @bind-Value='student.Name'
                   class="form-control">
        </InputText>
    </div>

    <div class="form-group" style="padding-bottom: 10px">
        <label for="Surname">Surname</label>
        <InputText id="Surname"
                   @bind-Value='student.Surname'
                   class="form-control">
        </InputText>
    </div>

    <div class="form-group" style="padding-bottom: 10px">
        <label for="Group">Group</label>
        <InputText id="Group"
                   @bind-Value='student.GroupName'
                   class="form-control">
        </InputText>
    </div>

    <div class="form-group">
        <label for="AvgScore">Average score</label>
        <InputNumber id="AvgScore"
                     @bind-Value='student.AverageScore'
                     class="form-control">
        </InputNumber>
    </div>

    <br />

    <button type="submit" class="btn btn-primary">Save</button>
</EditForm>

@code {
    [Parameter]
    public string StudentName { get; set; }

    private Student student;

    private async Task Save()
    {
        await EditStudentUseCase.ExecuteAsync(student);
        Navigation.NavigateTo("/students");
    }

    protected override async Task OnInitializedAsync()
    {
        student = await GetStudentByNameUseCase.ExecuteAsync(StudentName);
    }

}
